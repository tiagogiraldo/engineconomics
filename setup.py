r""" \
Engineconomics
=====
Engineconomics is a library that allows to make computations and graphs used in Economic Engineering in Python.
---------
__version__
    Engineconomics version string
__author__
    Author of Engineconomics
__contributors__
    List of all contributors to the project
__homepage__
    Web URL of the Caer documentation    
"""

def get_contributors_list(filename="CONTRIBUTORS"):
    contr = [] 
    with open(filename, "r") as a:
        for line in a:
            line = line.strip()
            # line = """ + line + """
            contr.append(line)
    return contr


def write_meta(filename="engineconomics/_meta.py"):
    print("[INFO] Writing _meta.py")
    TEXT = META_PY_TEXT
    FULL_VERSION = VERSION
    CONTRIBUTORS = get_contributors_list()
    HOMEPAGE = GIT_URL
    
    a = open(filename, "w")

    try:
        a.write(TEXT % {"author": AUTHOR,
                        "author_email": str(AUTHOR_EMAIL),
                        "version": VERSION,
                       "full_version": FULL_VERSION,
                       "git_version": GIT_VERSION,
                       "isrelease": str(ISRELEASED),
                       "contributors": CONTRIBUTORS,
                       "homepage": str(HOMEPAGE) })
    finally:
        a.close()


def get_docs_url():
    return DOCS_URL


import sys 
import platform

MAJOR = 0
MINOR = 0
MICRO = 1
ISRELEASED = False
VERSION = f"{MAJOR}.{MINOR}.{MICRO}"
DESCRIPTION = 'This package develops a financial calculator with python.'


min_version = (3, 6, 0)

def is_right_py_version(min_py_version):
    if sys.version_info < (3,):
        sys.stderr.write("Python 2 has reached end-of-life and is no longer supported by Caer.")
        return False

    if sys.version_info < min_py_version:
        python_min_version_str = ".".join((str(num) for num in min_py_version))
        no_go = f"You are using Python {platform.python_version()}. Python >={python_min_version_str} is  required."
        sys.stderr.write(no_go)
        return False

    return True

if not is_right_py_version(min_version):
    sys.exit(-1)



#from gettext import find
#from setuptools import find_packages, setup, find_namespace_packages
#from distutils.core import setup, find_packages
from setuptools import setup, find_packages
from configparser import ConfigParser
import subprocess
import os 

# Git version stuff
sha = "Unknown"
here = os.path.dirname(os.path.abspath(__file__))

try:
    sha = subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=here).decode("ascii").strip()
except Exception:
    pass

# Configurations

# All settings are in configs.ini
config = ConfigParser(delimiters=["="])
config.read("configs.ini")
cfg = config["metadata"]

cfg_keys = "description keywords author author_email contributors".split()
expected = cfg_keys + "name user git_branch license status audience language dev_language".split()
for i in expected: assert i in cfg, f"Missing expected setting: {i}"

# Defining Setup Variables

NAME = cfg["name"]
AUTHOR = cfg["author"]
AUTHOR_EMAIL = cfg["author_email"]
AUTHOR_LONG = AUTHOR + " <" + AUTHOR_EMAIL + ">"
LICENSE = cfg["license"]
FUNDING = cfg["funding"]
GIT_VERSION = repr(sha)
PLATFORMS = ["Any"]
GIT_URL = cfg["git_url"]
DOCS_URL = cfg["docs_url"]
DOWNLOAD_URL = cfg["download_url"]
DESCRIPTION = cfg["description"]
LONG_DESCRIPTION = open("README.md", encoding="utf-8").read()
KEYWORDS = [i for i in cfg["keywords"].split(", ")]
REQUIREMENTS = [i for i in cfg["pip_requirements"].split(", ")]
CLASSIFIERS = [i for i in cfg["classifiers"].split("\n")][1:]
PYTHON_REQUIRES = ">=" + cfg["min_python"]


STATUSES = [ 
    "1 - Planning", 
    "2 - Pre-Alpha", 
    "3 - Alpha",
    "4 - Beta", 
    "5 - Production/Stable", 
    "6 - Mature", 
    "7 - Inactive" 
]

META_PY_TEXT =\
"""
# This file is automatically generated during the generation of setup.py
# Copyright 2023, Engineconomics
author = "%(author)s"
author_email = "%(author_email)s"
version = "%(version)s"
full_version = "%(full_version)s"
git_version = %(git_version)s
release = %(isrelease)s
contributors = %(contributors)s
homepage = "%(homepage)s"
"""

# Setting up

def setup_package():
    # Rewrite the meta file everytime
    write_meta()

    metadata = dict(
        name = NAME,
        version = VERSION,
        author = AUTHOR,
        author_email = AUTHOR_EMAIL,
        maintainer = AUTHOR,
        description = DESCRIPTION,
        long_description = LONG_DESCRIPTION,
        long_description_content_type = "text/markdown",
        url = GIT_URL,
        download_url = DOWNLOAD_URL,
        project_urls = {
            "Bug Tracker": GIT_URL + "/issues",
            "Documentation": get_docs_url(),
            "Funding": FUNDING,
            "Source Code": GIT_URL,
        },
        license = LICENSE,
        platforms = PLATFORMS,
        install_requires = REQUIREMENTS,
        python_requires = PYTHON_REQUIRES,

# Include_package_data is required for setup.py to recognize the MAINFEST.in file
# https://python-packaging.readthedocs.io/en/latest/non-code-files.html
        include_package_data = True,
        zip_safe = False,
        keywords = KEYWORDS,
        classifiers = CLASSIFIERS,
    )
    setup(**metadata)


if __name__ == "__main__":
    # Running the build is as simple as: 
    # >> python setup.py sdist bdist_wheel
    # This command includes building the required Python extensions

    # It"s recommended, however, to use:
    # >> python setup.py build_ext 
    # first, and then
    # >> python setup.py sdist bdist_wheel
    setup_package()